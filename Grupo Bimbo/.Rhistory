head(producto_tabla)
## 4:读取城镇和国家（州）数据
town_state <- fread("town_state.csv",sep=",",header = TRUE)
head(town_state)
library(dplyr)
head(traindata)
Agencia_products <- traindata %>%
group_by(Agencia_ID,Producto_ID) %>%
summarise(Units = sum(Venta_uni_hoy),
Demanda_uni_equil = sum(Demanda_uni_equil),
Return_Units = sum(Dev_uni_proxima)) %>%
mutate(Return_rate = Return_Units/(Return_Units + Units)) %>%
arrange(desc(Units))
head(Agencia_products)
dim(Agencia_products)
head(producto_tabla)
Agencia_products <- traindata %>%
group_by(Agencia_ID,Producto_ID) %>%
summarise(Units = sum(Venta_uni_hoy),
Demanda_uni_equil = sum(Demanda_uni_equil),
Return_Units = sum(Dev_uni_proxima)) %>%
mutate(Return_rate = Return_Units/(Return_Units + Units)) %>%
arrange(desc(Units)) %>%
inner_join(producto_tabla,by="Producto_ID")
head(Agencia_products)
head(town_state)
x <- read.table("http://www.ats.ucla.edu/stat/data/mat25.txt", header = FALSE)
head(x)
View(x)
network <- as.matrix(x)
g1 <- graph.adjacency(network)
(b1 <- betweenness(g1, directed = FALSE))
(d1 <- degree(g1, mode = "out"))
(c1 <- closeness(g1, mode = "out"))
xlist <- read.graph("http://www.ats.ucla.edu/stat/data/elist1.txt", format = "edgelist")
str(xlist)
head(Agencia_products)
setwd(User/Daitu/R/Polnet2015/Data)
setwd(Users/Daitu/R/Polnet2015/Data)
setwd(./Users/Daitu/R/Polnet2015/Data)
setwd("Users/Daitu/R/Polnet2015/Data")
setwd("/Users/Daitu/R/Polnet2015/Data")
getwd()
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
View(nodes)
head(nodes)
head(links)
nrow(nodes)
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
links <- aggregate(links[,3], links[,-3], sum)
head(links)
aggregate(links[,3], links[,-3], sum)
links <- aggregate(links[,3], links[,-3], sum)
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
# Examine the data:
head(nodes)
head(links)
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
aggregate(links[,3], links[,-3], sum)
links[,3]
links[,-3]
aggregate(links[,3], links[,-3], sum)
head(links)
links <- aggregate(links[,3], links[,-3], sum)
order(links$from, links$to)
links[order(links$from, links$to),]
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
links
nodes2 <- read.csv("Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
# Examine the data:
head(nodes2)
head(links2)
links2 <- as.matrix(links2)
dim(links2)
dim(nodes2)
links2
graph.data.frame(links, nodes, directed=T)
net <- graph.data.frame(links, nodes, directed=T)
class(net)
net
E(net)
V(net)
E(net)$type
V(net)$media
net[1,]
net[5,7]
plot(net) # not pretty!
net <- simplify(net, remove.multiple = F, remove.loops = T)
plot(net, edge.arrow.size=.4,vertex.label=NA)
plot(x=1:10, y=rep(5,10), pch=19, cex=5, col="dark red")
points(x=1:10, y=rep(6, 10), pch=19, cex=5, col="#557799")
points(x=1:10, y=rep(4, 10), pch=19, cex=5, col=rgb(.25, .5, .3))
rgb(10, 100, 100, maxColorValue=255)
# We can also set the opacity/transparency using the parameter 'alpha' (range 0-1):
plot(x=1:5, y=rep(5,5), pch=19, cex=16, col=rgb(.25, .5, .3, alpha=.5), xlim=c(0,6))
# If we have a hex color representation, we can set the transparency alpha
# using 'adjustcolor' from package 'grDevices'. For fun, let's also set the
# the plot background to gray using the par() function for graphical parameters.
par(bg="black")
col.tr <- grDevices::adjustcolor("#557799", alpha=0.7)
plot(x=1:5, y=rep(5,5), pch=19, cex=20, col=col.tr, xlim=c(0,6))
par(bg="white")
# If you plan on using the built-in color names, here's what they are:
colors()
grep("blue", colors(), value=T)
# In many cases, we need a number of contrasting colors, or multiple shades of a color.
# R comes with some predefined palette function that can generate those for us.
pal1 <- heat.colors(5, alpha=1)   # generate 5 colors from the heat palette, opaque
pal2 <- rainbow(5, alpha=.5)      # generate 5 colors from the heat palette, semi-transparent
plot(x=1:10, y=1:10, pch=19, cex=10, col=pal1)
plot(x=10:1, y=1:10, pch=19, cex=10, col=pal2)
# We can also generate our own gradients using colorRampPalette.
# Note that colorRampPalette returns a *function* that we can use
# to generate as many colors from that palette as we need.
palf <- colorRampPalette(c("gray80", "dark red"))
plot(x=10:1, y=1:10, pch=19, cex=10, col=palf(100))
# To add transparency to colorRampPalette, you need to add a parameter `alpha=TRUE`:
palf <- colorRampPalette(c(rgb(1,1,1, .2),rgb(.8,0,0, .7)), alpha=TRUE)
plot(x=10:1, y=1:10, pch=19, cex=10, col=palf(10))
# Finding good color combinations is a tough task - and the built-in R palettes
# are rather limited. Thankfully there are other available packages for this:
# install.packages("RColorBrewer")
library(RColorBrewer)
display.brewer.all()
# This package has one main function, called 'brewer.pal'.
# Using it, you just need to select the desired palette and a number of colors.
# Let's take a look at some of the RColorBrewer palettes:
display.brewer.pal(8, "Set3")
display.brewer.pal(8, "Spectral")
display.brewer.pal(8, "Blues")
pal3 <- brewer.pal(10, "Set3")
plot(x=10:1, y=10:1, pch=19, cex=6, col=pal3)
plot(x=10:1, y=10:1, pch=19, cex=6, col=rev(pal3)) # backwards
detach(package:RColorBrewer)
# ================ A brief detour on fonts in R plots ================
# Using different fonts for R plots may take a little bit of work.
# Especially for Windows - Mac & Linux users may not have to do this.
# First we'd use the 'extrafont' package to import the fonts from the OS into R:
# install.packages("extrafont")
library(extrafont)
# Import system fonts - may take a while, so DO NOT run this during the workshop.
# font_import()
fonts() # See what font families are available to you now.
loadfonts(device = "win") # use device = "pdf" for pdf plot output.
plot(net, vertex.size=30)
# Now you should be able to do  this:
plot(net, vertex.size=30, vertex.label.family="Arial Black" )
# To embed the fonts & use them in PDF files:
# First you may have to let R know where to find ghostscript
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.10/bin/gswin64c.exe")
# The command 'pdf' will send all the plots we output before dev.off() to a pdf file:
detach(package:extrafont)
?igraph.plotting
plot(net, edge.arrow.size=.4, edge.curved=.1)
# Set node color to orange and the border color to hex #555555
# Replace the vertex label with the node names stored in "media"
plot(net, edge.arrow.size=.4, edge.curved=0,
vertex.color="orange", vertex.frame.color="#555555",
vertex.label=V(net)$media, vertex.label.color="black",
vertex.label.cex=.7)
# The second way to set attributes is to add them to the igraph object.
# Generate colors base on media type:
colrs <- c("gray50", "tomato", "gold")
V(net)$color <- colrs[V(net)$media.type]
# Compute node degree (#links) and use it to set node size:
deg <- degree(net, mode="all")
V(net)$size <- deg*3
V(net)$size <- V(net)$audience.size*0.6
# The labels are currently node IDs.
# Setting them to NA will render no labels:
V(net)$label.color <- "black"
V(net)$label <- NA
# Set edge width based on weight:
E(net)$width <- E(net)$weight/6
#change arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "gray80"
plot(net)
# We can also override the attributes explicitly in the plot:
plot(net, edge.color="orange", vertex.color="gray50")
# We can also add a legend explaining the meaning of the colors we used:
plot(net)
legend(x=-1.1, y=-1.1, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2.5, bty="n", ncol=1)
# Sometimes, especially with semantic networks, we may be interested in
# plotting only the labels of the nodes:
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=1.2, edge.color="gray90")
# Let's color the edges of the graph based on their source node color.
# We'll get the starting node for each edge with "get.edges"
edge.start <- get.edges(net, 1:ecount(net))[,1]
edge.col <- V(net)$color[edge.start]
plot(net, edge.color=edge.col, edge.curved=.1)
#  ------->> Network Layouts --------
# Network layouts are algorithms that return coordinates for each
# node in a network.
# Let's generate a slightly larger 80-node graph.
net.bg <- barabasi.game(80)
V(net.bg)$size <- 8
V(net.bg)$color <- "orange"
V(net.bg)$label <- ""
E(net.bg)$arrow.mode <- 0
plot(net.bg)
# You can set the layout in the plot function:
plot(net.bg, layout=layout.random)
# Or calculate the vertex coordinates in advance:
l <- layout.circle(net.bg)
plot(net.bg, layout=l)
# l is simply a matrix of x,y coordinates (N x 2) for the N
# nodes in the graph. You can generate your own:
l
l <- matrix(c(1:vcount(net.bg), c(1, vcount(net.bg):2)), vcount(net.bg), 2)
plot(net.bg, layout=l)
# This layout is just an example and not very helpful - thankfully
# igraph has a number of built-in layouts, including:
# Randomly placed vertices
l <- layout.random(net.bg)
plot(net.bg, layout=l)
# Circle layout
l <- layout.circle(net.bg)
plot(net.bg, layout=l)
# 3D sphere layout
l <- layout.sphere(net.bg)
plot(net.bg, layout=l)
# The Fruchterman-Reingold force-directed algorithm
# Nice but slow, most often used in graphs smaller than ~1000 vertices.
# Some parameters you can set are the area (default is the square of # nodes)
# and repulserad (cancelation radius for the repulsion - the area multiplied by # nodes).
# Both parameters affect the spacing  of the plot - play with them until you like the results.
# The "weight" parameter increases the attraction among nodes connected by heavier edges.
l <- layout.fruchterman.reingold(net.bg, repulserad=vcount(net.bg)^3,
area=vcount(net.bg)^2.4)
par(mfrow=c(1,2)) # plot two figures - 1 row, 2 columns
plot(net.bg, layout=layout.fruchterman.reingold)
plot(net.bg, layout=l)
dev.off() # shut off the  graphic device to clear the two-figure configuration.
# You will also notice that the layout is not deterministic - different runs
# will result in slightly different configurations. Saving the layout in l
# allows us to get the exact same result multiple times.
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(net.bg, layout=layout.fruchterman.reingold)
plot(net.bg, layout=layout.fruchterman.reingold)
plot(net.bg, layout=l)
plot(net.bg, layout=l)
l <- layout.fruchterman.reingold(net.bg)
# Normalize them so that they are in the -1, 1 interval:
l <- layout.norm(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
par(mfrow=c(2,2))
plot(net.bg, rescale=F, layout=l*0.4)
plot(net.bg, rescale=F, layout=l*0.8)
plot(net.bg, rescale=F, layout=l*1.2)
plot(net.bg, rescale=F, layout=l*1.6)
dev.off()
# Another popular force-directed algorithm that produces nice results for
# connected graphs is Kamada Kawai. Like Fruchterman Reingold, it attempts to
# minimize the energy in a spring system.
# Igraph also has a spring-embedded layout called layout.spring().
l <- layout.kamada.kawai(net.bg)
plot(net.bg, layout=l)
l <- layout.spring(net.bg, mass=.5)
plot(net.bg, layout=l)
# LGL algorithm for large connected graphs. Here you can specify a root -
# the node that will be placed in the middle of the layout.
plot(net.bg, layout=layout.lgl)
# By default, igraph uses a layout called layout.auto which selects
# an appropriate layout algorithm based on the properties of the graph.
# Check out all available layouts in igraph:
?igraph::layout
layouts <- grep("^layout\\.", ls("package:igraph"), value=TRUE)
# Remove layouts that do not apply to our graph.
layouts <- layouts[!grepl("bipartite|merge|norm|sugiyama", layouts)]
par(mfrow=c(3,3), mar=c(1,1,1,1))
for (layout in layouts) {
print(layout)
l <- do.call(layout, list(net))
plot(net, edge.arrow.mode=0, layout=l, main=layout) }
dev.off()
# ------->> Highlighting aspects of the network --------
plot(net)
# Notice that this network plot is still not too helpful.
# We can identify the type and size of nodes, but cannot see
# much about the structure since the links we're examining are so dense.
# One way to approach this is to see if we can sparsify the network.
hist(links$weight)
mean(links$weight)
sd(links$weight)
# There are more sophisticated ways to extract the key edges,
# but for the purposes of this excercise we'll only keep ones
cut.off <- mean(links$weight)
net.sp <- delete.edges(net, E(net)[weight<cut.off])
plot(net.sp)
l <- layout.fruchterman.reingold(net.sp, repulserad=vcount(net.sp)^2.1)
plot(net.sp, layout=l)
# Another way to think about this is to plot the two tie types
# (hyperlik & mention) separately:
tkid <- tkplot(net) #tkid is the id of the tkplot
l <- tkplot.getcoords(tkid) # grab the coordinates from tkplot
plot(net, layout=l)
head(nodes2)
head(links2)
net2 <- graph.incidence(links2)
plot(net2)
# This time we will make nodes look different based on their type.
V(net2)$color <- c("steel blue", "orange")[V(net2)$type+1]
V(net2)$shape <- c("square", "circle")[V(net2)$type+1]
V(net2)$label <- ""
V(net2)$label[V(net2)$type==F] <- nodes2$media[V(net2)$type==F]
V(net2)$label.cex=.6
V(net2)$label.font=2
plot(net2, vertex.label.color="white", vertex.size=(2-V(net2)$type)*8)
plot(net2, vertex.label=NA, vertex.size=7, layout=layout.bipartite)
# Using text as nodes:
par(mar=c(0,0,0,0))
plot(net2, vertex.shape="none", vertex.label=nodes2$media,
vertex.label.color=V(net2)$color, vertex.label.font=2,
vertex.label.cex=.95, edge.color="gray70",  edge.width=2)
library(data.table)
library(igraph)
library(network)
library(sna)
library(ndtv)
library(dplyr)
## 读取数据####
## 1:读取训练集
setwd("/Users/Daitu/数据分析/kaggle/Grupo Bimbo")
getwd()
system.time({
traindata <- fread("train.csv",sep=",",header = TRUE)
})
head(traindata)
## 2:读取客户名单数据
cliente_tabla <- fread("cliente_tabla.csv",sep=",",header = TRUE)
head(cliente_tabla)
## 3:读取产品名单数据
producto_tabla <- fread("producto_tabla.csv",sep=",",header = TRUE)
## 4:读取城镇和国家（州）数据
head(town_state)
## -----------------------------------------------------------------------------
Agencia_products <- traindata %>%
summarise(Units = sum(Venta_uni_hoy),
Return_Units = sum(Dev_uni_proxima)) %>%
arrange(desc(Units)) %>%
head(Agencia_products)
town_state <- fread("town_state.csv",sep=",",header = TRUE)
## -----------------------------------------------------------------------------
group_by(Agencia_ID,Producto_ID) %>%
mutate(Return_rate = Return_Units/(Return_Units + Units)) %>%
dim(Agencia_products)
Demanda_uni_equil = sum(Demanda_uni_equil),
head(producto_tabla)
inner_join(producto_tabla,by="Producto_ID")
## 销售站和产品的关系网络图####
Agencia_products <- traindata %>%
group_by(Agencia_ID,Producto_ID) %>%
summarise(Units = sum(Venta_uni_hoy),
Demanda_uni_equil = sum(Demanda_uni_equil),
Return_Units = sum(Dev_uni_proxima)) %>%
mutate(Return_rate = Return_Units/(Return_Units + Units)) %>%
arrange(desc(Units)) %>%
inner_join(producto_tabla,by="Producto_ID")
head(Agencia_products)
dim(Agencia_products)
setwd("/Users/Daitu/数据分析/kaggle/Grupo Bimbo")
getwd()
## 加载包
library(data.table)
library(ggplot2)
library(dplyr)
library(treemap)
## 读取数据####
## 1:读取训练集
system.time({
traindata <- fread("train.csv",sep=",",header = TRUE)
})
head(traindata)
## 2:读取客户名单数据
cliente_tabla <- fread("cliente_tabla.csv",sep=",",header = TRUE)
head(cliente_tabla)
## 3:读取产品名单数据
producto_tabla <- fread("producto_tabla.csv",sep=",",header = TRUE)
head(producto_tabla)
## 4:读取城镇和国家（州）数据
town_state <- fread("town_state.csv",sep=",",header = TRUE)
head(town_state)
## -----------------------------------------------------------------------------
## -----------------------------------------------------------------------------
## 数据的描述统计####
## -----------------------------------------------------------------------------
## -----------------------------------------------------------------------------
## 1:分析数据的周数：Semana
Semana <- data.frame(table(traindata$Semana))
colnames(Semana) <- c("Semana","Freq")
# 3        4        5        6        7        8        9
# 11165207 11009593 10615397 10191837 10382849 10406868 10408713
## 条形图
ggplot(data = Semana,aes(Semana,Freq)) +
geom_bar(stat = "identity", width = 0.6,fill = "lightblue",colour = "black") +
theme_grey(base_family = "STKaiti") +
scale_y_continuous() +
labs(x="周数",y="数据条数",title = "每周数据的记录数")
func<-function(x){
if (x%%2==0){
ret<-'even'
}
else{
ret<-'odd'
}
return(ret)
}
func(34)
vec<-round(runif(4)*100)
func(vec)
sapply(vec,func)
ifelse(vec%%2,'odd','even')
iris
op<-options()
options(digits=2)
sapply(iris[,1:4],function(x) sd(x)/mean(x))
options(op)
result<-iris[,1]+iris[,2]
mylist<-as.list(iris[,1:4]) #将数据框转化为列表
sapply(mylist,mean)
vec1<-vec2<-1:9
para<-expand.grid(vec1,vec2)
res<-mapply(FUN=prod,para[,1],para[,2])
myfunc<-function(x,y){
left<-paste0(x,'*',y,'=')
right<-x*y
ret<-paste0(left,right)
return(ret)
}
outer(vec1,vec2,FUN=myfunc)
res<-replicate(100,mean(rnorm(10000)))
res
data_sub<-subset(iris,Species=='setosa',3:5)
data_sub
iris_tr<-transform(iris,v1=log(Sepal.Length))
iris_tr
library(ggplot2)
diamonds   #砖石数据
qplot(carat,price,data=diamonds) #重量和价格图像
qplot(log(carat),log(price),data=diamonds)
qplot(carat,x*y*z,data=diamonds)
set.seed(1410)#设置随机数种子
dsmall<-diamonds[sample(nrow(diamonds),100),]
dsmall
qplot(carat,price,data=dsmall,colour=color)#画不同的颜色
qplot(carat,price,data=dsmall,shap=cut)
qplot(carat,price,data=dsmall,shap=cut)
qplot(carat,price,data=dsmall,shape=cut)
qplot(carat,price,data=diamonds,alpha=I(1/10))
qplot(carat,price,data=diamonds,alpha=I(1/100))
qplot(carat,price,data=dsmall,colour=color,geom=c("point","smooth"))
qplot(carat,price,data=dsmall,geom=c("point","smooth"))
qplot(color,price/carat,data=diamonds,geom="boxplot")
qplot(color,price/carat,data=diamonds,geom="jitter")
qplot(carat,data=diamonds,geom="histogram",fill=color)
qplot(carat,data=diamonds,geom="density")
qplot(carat,data=diamonds,geom="density",colour=color)
head(economics,10)
mpg
head(mpg,5)
qplot(displ,hwy,data=mpg,colour=factor(cyl))
p <- ggplot(mpg, aes(class,hwy,fill=class))
p+geom_boxplot()
p+geom_violin(alpha=0.3,width=0.9)+
geom_jitter(shape=21)
p+stat_density2d(aes(fill = ..level..),geom="polygon") +
coord_cartesian(xlim = c(0,1.5),ylim=c(0,6000))+
scale_fill_continuous(high='red2',low='blue4')
p+stat_density2d(aes(fill = ..level..),geom="polygon") +
coord_cartesian(xlim = c(0,1.5),ylim=c(0,6000))+
scale_fill_continuous(high='red2',low='blue4')
p+geom_violin(alpha=0.3,width=0.9)+
geom_jitter(shape=21)
p+geom_stat_density2d(aes(fill = ..level..),geom="polygon") +
coord_cartesian(xlim = c(0,1.5),ylim=c(0,6000))+
scale_fill_continuous(high='red2',low='blue4')
p+stat_density_2d(aes(fill = ..level..),geom="polygon") +
coord_cartesian(xlim = c(0,1.5),ylim=c(0,6000))+
scale_fill_continuous(high='red2',low='blue4')
p+stat_density_2d(aes(fill = ..level..)) +
coord_cartesian(xlim = c(0,1.5),ylim=c(0,6000))+
scale_fill_continuous(high='red2',low='blue4')
dir <- cut_interval(runif(100,0,360),n=16)
mag <- cut_interval(rgamma(100,15),4) sample <- data.frame(dir=dir,mag=mag)
sample <- data.frame(dir=dir,mag=mag)
mag <- cut_interval(rgamma(100,15),4)
sample <- data.frame(dir=dir,mag=mag)
p <- ggplot(sample,aes(x=dir,y=..count..,fill=mag)) p + geom_bar()+ coord_polar()
p + geom_bar()+ coord_polar()
p <- ggplot(sample,aes(x=dir,y=..count..,fill=mag))
p + geom_bar()+ coord_polar()
p+stat_density_2d(aes(fill = ..level..)) +
coord_cartesian(xlim = c(0,1.5),ylim=c(0,6000))+
scale_fill_continuous(high='red2',low='blue4')
p <- ggplot(mpg, aes(class,hwy,fill=class))
p+geom_boxplot()
p+geom_violin(alpha=0.3,width=0.9)+
geom_jitter(shape=21)
p+stat_density_2d(aes(fill = ..level..)) +
coord_cartesian(xlim = c(0,1.5),ylim=c(0,6000))+
scale_fill_continuous(high='red2',low='blue4')
